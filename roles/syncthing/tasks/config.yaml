---
- name: Generate Syncthing config (Linux)
  become: true
  become_user: "{{ syncthing_user }}"
  changed_when: false
  when: ansible_system == "Linux"
  ansible.builtin.shell:
    cmd: >-
      rm -rf $HOME/.local/state/syncthing &&
      syncthing generate --no-default-folder --gui-user={{ syncthing_gui_user }} --gui-password={{ syncthing_gui_password }}

- name: Generate Syncthing config (Windows)
  become: true
  become_user: "{{ syncthing_user }}"
  changed_when: false
  when: ansible_system == "Win32NT"
  ansible.windows.win_shell: |
    $installPath = "$env:LOCALAPPDATA\Programs\Syncthing"
    $configPath = "$env:LOCALAPPDATA\Syncthing"

    if (Test-Path -Path $configPath) {
        Remove-Item -Path $configPath -Recurse -Force
    }

    New-Item -ItemType Directory -Path $configPath -Force | Out-Null

    & "$installPath\syncthing.exe" generate --no-default-folder --gui-user={{ syncthing_gui_user }} --gui-password={{ syncthing_gui_password }}

- name: Fetch Syncthing config (Linux)
  become: true
  become_user: "{{ syncthing_user }}"
  register: syncthing_config_linux_slurped
  when: ansible_system == "Linux"
  ansible.builtin.slurp:
    src: $HOME/.local/state/syncthing/config.xml

- name: Fetch Syncthing config (Windows)
  become: true
  become_user: "{{ syncthing_user }}"
  register: syncthing_config_windows_slurped
  when: ansible_system == "Win32NT"
  ansible.windows.slurp:
    src: "%LOCALAPPDATA%\\Syncthing\\config.xml"

- name: Decode Syncthing config content
  ansible.builtin.set_fact:
    syncthing_config_original: >-
      {{ 
        syncthing_config_linux_slurped.content | default(syncthing_config_windows_slurped.content)
        | ansible.builtin.b64decode
        | ansible.utils.from_xml
      }}

- name: Create new Syncthing device config
  ansible.builtin.set_fact:
    syncthing_config_device: >-
      {{
        {
          inventory_hostname: syncthing_config_original.configuration.device
            | combine({
                '@name': inventory_hostname,
                'autoAcceptFolders': 'false',
              })
        }
      }}

- name: Combine Syncthing device configs from all hosts
  run_once: true
  ansible.builtin.set_fact:
    syncthing_combined_config_device: >-
      {{
        syncthing_combined_config_device
        | default({})
        | combine(ansible_play_hosts_all
          | map('extract', hostvars)
          | selectattr('syncthing_config_device', 'defined')
          | map(attribute='syncthing_config_device'),
          recursive=True)
      }}

- name: Create a map of all folders from all hosts
  run_once: true
  ansible.builtin.set_fact:
    syncthing_all_folders_map: >-
      {{
        syncthing_all_folders_map | default({})
        | combine(
            dict(
              ansible_play_hosts_all
              | map('extract', hostvars)
              | selectattr('syncthing_folders', 'defined')
              | map(attribute='inventory_hostname')
              | zip(
                  ansible_play_hosts_all
                  | map('extract', hostvars)
                  | selectattr('syncthing_folders', 'defined')
                  | map(attribute='syncthing_folders')
                )
            )
          )
      }}

- name: Create new Syncthing folder config
  loop: "{{ syncthing_folders }}"
  loop_control:
    label: "{{ item.id }}"
  ansible.builtin.set_fact:
    syncthing_config_folder: >-
      {{
        syncthing_config_folder | default({'folder': []})
        | combine({
            'folder': syncthing_config_folder.folder + [
              syncthing_config_original.configuration.defaults.folder
              | combine({
                  '@id': item.id,
                  '@path': item.path,
                  '@type': item.type,
                })
              | combine({
                  'device': (
                    item.partners | default(
                      syncthing_all_folders_map
                      | dict2items
                      | selectattr('key', '!=', inventory_hostname)
                      | selectattr('value', 'selectattr', 'id', 'eq', item.id)
                      | map(attribute='key')
                      | list
                    )
                  )
                  | map('extract', syncthing_combined_config_device)
                  | list
                }, recursive=True)
            ]
          })
      }}

- name: Determine devices to include in the config
  ansible.builtin.set_fact:
    syncthing_final_devices: >-
      {{
        syncthing_config_folder.folder
        | map(attribute='device')
        | flatten
        | map(attribute='@id')
        | unique
        | map('extract', syncthing_combined_config_device)
        | list
      }}

- name: Merge all into final Syncthing config
  ansible.builtin.set_fact:
    syncthing_config_updated: >-
      {{
        syncthing_config_original
        | combine({
            'configuration': syncthing_config_original.configuration
            | combine({
                'device': [syncthing_config_device[inventory_hostname]] + syncthing_final_devices
              })
            | combine(syncthing_config_folder)
            | combine({
                'gui': {
                  'address': syncthing_gui_address,
                },
                'options': {
                  'reconnectionIntervalS': '10',
                  'startBrowser': 'false',
                  'urAccepted': '-1',
                  'crashReportingEnabled': 'false',
                }
              }, recursive=True)
          })
      }}

- name: Write final Syncthing config (Linux)
  become: true
  become_user: "{{ syncthing_user }}"
  when: ansible_system == "Linux"
  ansible.builtin.copy:
    content: "{{ syncthing_config_updated | ansible.utils.to_xml(indent='spaces', full_document=False) }}"
    dest: $HOME/.local/state/syncthing/config.xml
    mode: "0600"

- name: Write final Syncthing config (Windows)
  become: true
  become_user: "{{ syncthing_user }}"
  when: ansible_system == "Win32NT"
  ansible.windows.win_copy:
    content: "{{ syncthing_config_updated | ansible.utils.to_xml(indent='spaces', full_document=False) }}"
    dest: "%LOCALAPPDATA%\\Syncthing\\config.xml"
    force: true

- name: Start Syncthing service (systemd)
  become: true
  when:
    - ansible_system == "Linux"
    - ansible_service_mgr == "systemd"
  ansible.builtin.systemd_service:
    name: "syncthing@{{ syncthing_user }}"
    state: restarted
    daemon_reload: true
    masked: false
    enabled: true

- name: Waiting Syncthing service to be ready
  when:
    - ansible_system == "Linux"
    - ansible_service_mgr == "systemd"
  ansible.builtin.pause:
    seconds: 30

- name: Restart Syncthing
  become: true
  when:
    - ansible_system == "Linux"
    - ansible_service_mgr == "systemd"
  ansible.builtin.systemd:
    name: syncthing@{{ syncthing_user }}
    state: restarted

- name: Start Syncthing service (Windows)
  become: true
  when: ansible_system == "Win32NT"
  ansible.windows.win_service:
    name: syncthing
    state: restarted
